import argparse
from testrail_api import TestRailAPI
import ollama

# ðŸ”¹ TestRail API Configuration
TESTRAIL_URL = "https://your_testrail_instance.com"
USERNAME = "your_email"
PASSWORD = "your_api_key"
PROJECT_ID = 1
client = TestRailAPI(TESTRAIL_URL, USERNAME, PASSWORD)

AI_model = "deepseek-r1:7b"
explanation_text = ("Convert the following test case into a Robot Framework test script."
                    "The robot framework includes these well implemented keywords:)"
                    "Load Raw Measurement, the input argument is manufacturer, e.g. Septentrio, Novatel, etc;"
                    "Load Reference, the input argument is the file path (Reference is always generated by post "
                    "processing high-end INS GNSS measurement);"
                    "ARCH Post Process: the input argument is the file path (ARCH is the runnable software of our "
                    "firmware, post process raw measurement by using ARCH, generates the positioning results while "
                    "simulating the real time behavior);"
                    "Compare Result: the input argument is the file paths for the result in test and the reference, "
                    "it generates the accuracy statistics of positioning result.")
prefix_test_script = "The following robot framework test scripted is generated by AI:"
test_example = ("Load the Septentrio raw measurements of open sky test run,"
                "Load the post processed high grade INS result as reference,"
                "Process the raw measurement with ARCH to generate positioning result,"
                "Compare the result with INS reference,"
                "The 2D positioning accuracy should be within 1 cm.")
test_script_file_path = "test_opensky.robot"

def get_test_cases(project_id: int = 1, test_case_id: list = []):
    """Fetch test cases from TestRail"""

    # Get all test cases with the given project ID, and return the test case content in list
    if test_case_id[0] == "all":
        cases = client.get(f"get_cases/{project_id}")
        return cases["cases"]

    # Get the test cases with the given project ID and the test case IDs, and return the test case content in list
    cases = []
    for id in test_case_id:
        response = client.get(f"get_case/{project_id}&suite_id={id}")
        cases.append(response["cases"])
    return cases

def create_test_case(project_id: int = 1, test_case_content: str = ""):
    """Input the description of test case, create the test case in Test Rail, and return the test case ID"""
    case = client.post(f"add_case/{project_id}",
                       json = {"custom_steps": f"{test_case_content}"})
    return case["suite_id"]

def generate_robot_test_case(test_case_text: str = ""):
    """Use OpenAI API to generate a Robot Framework test case from the given TestRail text"""
    prompt = f"""
    Explanation:
    {explanation_text}

    Test Case:
    {test_case_text}

    Please add the prefix {prefix_test_script} to the real test script.
    """

    # Prepare AI analysis request
    messages=[{"role": "user", "content": prompt}]
    response = ollama.chat(model=AI_model, messages=messages)

    return response["message"]["content"].split(prefix_test_script)[1]

def save_robot_script(test_cases: list = [], test_case_content: str = "", fn_test_script: str = ""):
    """Generate and save Robot Framework test scripts for each TestRail test case"""
    robot_script = """*** Settings ***
Library    SomeLibrary
Resource   keywords.robot

*** Test Cases ***
"""
    if test_cases:
        for case in test_cases:
            title = case["title"].replace(" ", "_")
            test_case_content = case["custom_steps"]
            robot_test = generate_robot_test_case(test_case_text=test_case_content)
            robot_script += f"\n{title}\n{robot_test}\n"
    else:
        robot_test = generate_robot_test_case(test_case_text=test_case_content)
        robot_script += f"\n{robot_test}\n"

    with open(fn_test_script, "w") as file:
        file.write(robot_script)

    print("âœ… Robot Framework test script generated!")

def main(project_id: int = 1, test_case_id: list = [], test_case_content: str = test_example, fn_test_script: str = ""):
    # Pull existing test cases, test_case_id is mandatory
    # Overwrite existing test case, test_case_id and test_case_content are mandatory
    if test_case_id:
        cases = get_test_cases(project_id=project_id, test_case_id=test_case_id)
        save_robot_script(test_cases=cases, test_case_content=test_case_content, fn_test_script=fn_test_script)
    # Create new test case, test_case_content is mandatory
    else:
        create_test_case(project_id=project_id, test_case_content=test_case_content)
        save_robot_script(test_case_content=test_case_content, fn_test_script=fn_test_script)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Automatically generate robot framework test script according to test case content')
    parser.add_argument('--project-id', default="1",
                        help='The project ID of the test cases (default: 1)')
    parser.add_argument('--test-case-id', default=[],
                        help='The list of test case IDs (default: [])')
    parser.add_argument('--test-case-content', default=test_example,
                        help='The content of the test case (default: see string "test_example")')
    parser.add_argument('--filename', default=test_script_file_path,
                        help='Absolute file path of the generated robot framework test script (default: see string "test_script_file_path")')
    args = parser.parse_args()
    main(project_id=args.project_id, test_case_id=args.test_case_id, test_case_content=args.test_case_content, fn_test_script=args.filename)

